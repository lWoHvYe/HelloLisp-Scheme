
 (define (eval-cond exp env) 
   (let ((clauses (cdr exp)) 
         (predicate car) 
         (consequent cdr)) 
     (define (imply-clause? clause) (eq? (cadr clause)  '=>)) 
     (define (else-clause?  clause) (eq? (car clause) 'else)) 
     (define (rec-eval clauses) 
       (if (null? clauses) 'false; checked all, no else-clause 
           (let ((first-clause (car clauses))) 
             (cond ((else-clause? first-clause) (eval-sequence (consequent first-clause) env)) 
                   ((imply-clause? first-clause) (let ((evaluated (eval (predicate first-clause) env))) 
                                                   (if (true? evaluated) 
                                                       (apply (eval (caddr first-clause) env) 
                                                              (list evaluated)) 
                                                       'false))) 
                   (else (if (true? (eval (predicate first-clause) env)) 
                             (eval-sequence (consequent first-clause) env) 
                             'false)))))) 
     (rec-eval clauses))) 

 (define (eval exp env) 
   (cond ((self-evaluating? exp) exp) 
         ((variable? exp) (lookup-variable-value exp env)) 
         ((quoted? exp) (text-of-quotation exp)) 
         ((assignment? exp) (eval-assignment exp env)) 
         ((definition? exp) (eval-definition exp env)) 
         ((if? exp) (eval-if exp env)) 
         ((lambda? exp) 
          (make-procedure (lambda-parameters exp) 
                          (lambda-body exp) 
                          env)) 
         ((begin? exp)  
          (eval-sequence (begin-actions exp) env)) 
         ;((cond? exp) (eval (cond->if exp) env)) 
         ((cond? exp) (eval-cond exp env)) 
         ((and? exp) (eval (and->if exp) env)) 
         ((or? exp) (eval (or->if exp) env)) 
         ((application? exp) 
          (apply (eval (operator exp) env) 
                 (list-of-values (operands exp) env))) 
         (else 
          (error "Unknown expression type -- EVAL" exp)))) 