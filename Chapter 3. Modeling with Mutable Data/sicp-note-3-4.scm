(define (make-serializer)
    (let ((mutex (make-mutex)))
        (lambda (p) 
            (define (serialized-p . args)
                (mutex 'acquire)
                (let ((val (apply p args)))
                    (mutex 'release)
                    val))
            serialized-p)))

(define (make-mutex)
    (let ((cell (list #f)))
        (define (the-mutex m)
            (cond ((eq? m 'acquire) 
                    (if (test-and-set! cell)
                        (the-mutex 'acquire))) ;retry
                ((eq? m 'release) (clear! cell))))
        the-mutex))

(define (clear! cell)
    (set-car! cell #f))

(define (test-and-set! cell)
    (without-interrupts)
      (lambda ()
        (if (car cell)
            #t
            (begin (set-car! cell #t)
            #f))))

 (define (make-semaphore n) 
   (let ((lock (make-mutex)) 
         (taken 0)) 
     (define (semaphore command) 
       (cond ((eq? command 'acquire) 
              (lock 'acquire) 
              (if (< taken n) 
                  (begin (set! taken (1+ taken)) (lock 'release)) 
                  (begin (lock 'release) (semaphore 'acquire)))) 
             ((eq? command 'release) 
              (lock 'acquire) 
              (set! taken (1- taken)) 
              (lock 'release)))) 
     semaphore)) 